import os,sys
from cPickle import load,dump
from Bio.Seq import Seq

def trashExtractor(inp):
	""" retrieve Overrepresented sequences from a fastqc_data file (i.e. polyA and adaptors) """
	with open(inp) as f:
	        flag = 0
	        for line in f:
	                line = line.strip()
	                if not flag:         
	                        if not line.startswith('>>Overrepresented sequences'): continue
	                        flag = 1
	                else:
	                        if line.startswith('>>END_'): return
        	                if not line.startswith('#'): yield line

def makeCutAdaptCL(inp1,inp2,universal=None,*adaptors):
	""" prepare Commmand line for cutadapt. Retrieve primers using the fastqc_data files and the adaptors.fasta file 
	Default cutadapt call is (for TrueSeq; borrowed from cutadapt manual):
		cutadapt \
        	    -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC \
        	    -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT \
        	    -o trimmed.1.fastq.gz -p trimmed.2.fastq.gz \
        	    reads.1.fastq.gz reads.2.fastq.gz
	output: a string with the command line for the cutadapt call
		"""
	out1,out2 = os.path.join(os.path.curdir(inp1),'trimmed'+os.path.basename(inp1)),os.path.join(os.path.curdir(inp2),'trimmed'+os.path.basename(inp2))
	if universal==None: universal="AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT"
	adapts = " ".join(["-a %s" %i for i in adaptors])
	commLine = "cutadapt %s -A %s -o %s -p %s %s %s" %(adapts,universal,out1,out2,inp1,inp2)
	return commLine

def getPolyA(inp):
	""" return polyA found in fastqc_data file """
	polyAs = []
	for line in trashExtractor(inp):
		if line.split('\t')[-1] == "No Hit": polyAs.append(line.split('\t')[0])
	return polyAs

def extractAdaptors(inp):
	""" return list of sequence for makeCutAdaptCL from fastqc_data file """
	adaptors = []
	adaptorsDict = load('adaptorsDicrionary.pkl') # remember to pickle a dictionary
	for line in trashExtractor(inp):
		if "asd" in line.split('\t')[-1]
	return
